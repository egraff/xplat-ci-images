name: Multi-architecture environment images


on:
  workflow_dispatch:


env:
  GH_PKG_PREFIX: docker.pkg.github.com/egraff/xplat-ci-images/


jobs:
  buildroot_base:
    name: Buildroot base
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to GitHub Package Registry
        shell: bash
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull images from GitHub Package Registry
        shell: bash
        run: |
          (
            docker pull ${{ env.GH_PKG_PREFIX }}buildroot:latest &&
            docker tag  ${{ env.GH_PKG_PREFIX }}buildroot:latest buildroot
          ) || true
          (
            docker pull ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache_build:latest &&
            docker tag  ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache_build:latest buildroot_with_dl_cache_build
          ) || true
          (
            docker pull ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache:latest &&
            docker tag  ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache:latest buildroot_with_dl_cache
          ) || true

      - name: Build buildroot base image
        shell: bash
        run: |
          docker build . \
            --tag buildroot \
            --file resources/docker/buildroot.Dockerfile \
            --cache-from buildroot

      - name: Build buildroot_with_dl_cache_build image
        shell: bash
        run: |
          docker build . \
            --tag buildroot_with_dl_cache_build \
            --file resources/docker/buildroot_with_dl_cache_build.Dockerfile \
            --build-arg baseimage=buildroot \
            --cache-from buildroot_with_dl_cache_build

      - name: Build buildroot_with_dl_cache image
        shell: bash
        run: |
          docker build . \
            --tag buildroot_with_dl_cache \
            --file resources/docker/buildroot_with_dl_cache.Dockerfile \
            --build-arg buildimage=buildroot_with_dl_cache_build \
            --build-arg baseimage=buildroot \
            --cache-from buildroot_with_dl_cache

      - name: Push to GitHub Packages
        shell: bash
        run: |
          docker tag buildroot ${{ env.GH_PKG_PREFIX }}buildroot:$GITHUB_SHA
          docker tag buildroot ${{ env.GH_PKG_PREFIX }}buildroot:latest
          docker tag buildroot_with_dl_cache_build ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache_build:$GITHUB_SHA
          docker tag buildroot_with_dl_cache_build ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache_build:latest
          docker tag buildroot_with_dl_cache ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache:$GITHUB_SHA
          docker tag buildroot_with_dl_cache ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache:latest
          docker push ${{ env.GH_PKG_PREFIX }}buildroot:$GITHUB_SHA
          docker push ${{ env.GH_PKG_PREFIX }}buildroot:latest
          docker push ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache_build:$GITHUB_SHA
          docker push ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache_build:latest
          docker push ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache:$GITHUB_SHA
          docker push ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache:latest


  buildroot_toolchain:
    name: Buildroot toolchain
    needs: buildroot_base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # 64-bit PowerPC big-endian (ppc64)
          - img_arch_prefix: ppc64_pseries_
            br2_config_file: ppc64_pseries
            linux_defconfig_file: powerpc64_pseries_defconfig

          # 32-bit PowerPC big-endian (ppc)
          - img_arch_prefix: ppc_g3beige_
            br2_config_file: ppc_g3beige
            linux_defconfig_file: powerpc_g3beige_defconfig

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to GitHub Package Registry
        shell: bash
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull images from GitHub Package Registry
        shell: bash
        run: |
          docker pull ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache:latest
          docker tag  ${{ env.GH_PKG_PREFIX }}buildroot_with_dl_cache:latest buildroot
          (
            docker pull ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain_build:latest &&
            docker tag  ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain_build:latest buildroot_toolchain_build
          ) || true

      - name: Build toolchain_build image
        shell: bash
        run: |
          rm -rf .br2-tree
          mkdir -p .br2-tree/configs
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' resources/br2/trees/default/ .br2-tree/
          cp resources/linux_configs/${{ matrix.linux_defconfig_file }} .br2-tree/linux-5.4.config
          (cd resources/br2/configs/toolchains && cat include/common_header ${{ matrix.br2_config_file }}) > .br2-tree/configs/config_defconfig
          docker build . \
            --tag buildroot_toolchain_build \
            --file resources/docker/buildroot_makebuild.Dockerfile \
            --build-arg baseimage=buildroot \
            --build-arg make_target=toolchain \
            --cache-from buildroot_toolchain_build

      - name: Push to GitHub Packages
        shell: bash
        run: |
          docker tag buildroot_toolchain_build ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain_build:$GITHUB_SHA
          docker tag buildroot_toolchain_build ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain_build:latest
          docker tag buildroot_toolchain ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain:$GITHUB_SHA
          docker tag buildroot_toolchain ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain:latest
          docker push ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain_build:$GITHUB_SHA
          docker push ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain_build:latest


  buildroot_images:
    name: Buildroot images
    needs: buildroot_toolchain
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # 64-bit PowerPC big-endian (ppc64)
          - runimage_arch_suffix: powerpc64
            img_arch_prefix: ppc64_pseries_
            br2_config_file: ppc64_pseries

          # 32-bit PowerPC big-endian (ppc)
          - runimage_arch_suffix: powerpc
            img_arch_prefix: ppc_g3beige_
            br2_config_file: ppc_g3beige

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to GitHub Package Registry
        shell: bash
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull images from GitHub Package Registry
        run: |
          docker pull ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain_build:$GITHUB_SHA
          docker tag  ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}toolchain_build:$GITHUB_SHA buildroot_toolchain_build
          (
            docker pull ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}images_build:latest &&
            docker tag  ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}images_build:latest images_build
          ) || true

      - name: Build images_build image
        shell: bash
        run: |
          rm -rf .br2-tree
          mkdir -p .br2-tree/configs
          mkdir -p .br2-tree/build_customizations
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' resources/br2/trees/default/ .br2-tree/
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' resources/br2/build_customizations/default/ .br2-tree/build_customizations/
          (cd resources/br2/configs/images && cat include/common_header ${{ matrix.br2_config_file }}) > .br2-tree/configs/config_defconfig
          docker build . \
            --tag images_build \
            --file resources/docker/buildroot_makebuild.Dockerfile \
            --build-arg baseimage=buildroot_toolchain_build \
            --cache-from images_build

      - name: Push to GitHub Packages
        run: |
          docker tag images_build ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}images_build:$GITHUB_SHA
          docker tag images_build ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}images_build:latest
          docker push ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}images_build:$GITHUB_SHA
          docker push ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}images_build:latest

      - name: Build images_build_final image
        shell: bash
        run: |
          rm -rf .br2-tree
          mkdir -p .br2-tree/build_customizations
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' resources/br2/build_customizations/sshserver/ .br2-tree/build_customizations/
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' resources/br2/build_customizations/host_overlay/ .br2-tree/build_customizations/
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' resources/br2/build_customizations/host_mnt/ .br2-tree/build_customizations/
          docker build . \
            --tag images_build_final \
            --file resources/docker/buildroot_makebuild.Dockerfile \
            --build-arg baseimage=images_build

      - name: Build runimage
        shell: bash
        run: |
          docker build . \
            --tag runimage \
            --file resources/docker/runimage.Dockerfile \
            --build-arg buildimage=images_build_final \
            --build-arg arch=${{ matrix.runimage_arch_suffix }}

      - name: Push to GitHub Packages
        run: |
          docker tag runimage ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}runimage:$GITHUB_SHA
          docker tag runimage ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}runimage:latest
          docker push ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}runimage:$GITHUB_SHA
          docker push ${{ env.GH_PKG_PREFIX }}${{ matrix.img_arch_prefix }}runimage:latest

      - name: Copy images to output folder
        shell: bash
        run: |
          rm -rf .dockersrv
          mkdir -p .dockersrv/output
          docker run \
            --rm \
            -v ${PWD}/.dockersrv:/srv \
            images_build_final \
            bash -c "cp -R /root/buildroot/output/images/ /srv/output/images/"

      - name: Upload images as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: images
          path: |
            .dockersrv/output/images/vmlinux
            .dockersrv/output/images/rootfs.cpio.lz4
