name: Buildroot for ppc64_pseries arch


on:
  workflow_dispatch:


jobs:
  buildroot_base:
    name: Buildroot base
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to GitHub Package Registry
        shell: bash
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull images from GitHub Package Registry
        shell: bash
        run: |
          (docker pull docker.pkg.github.com/egraff/xplat-ci-images/buildroot:latest && docker tag docker.pkg.github.com/egraff/xplat-ci-images/buildroot:latest buildroot) || true
          (docker pull docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache_build:latest && docker tag docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache_build:latest buildroot_with_dl_cache_build) || true
          (docker pull docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:latest && docker tag docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:latest buildroot_with_dl_cache) || true

      - name: Build buildroot base image
        run: docker build . --tag buildroot --file docker/buildroot.Dockerfile --cache-from buildroot

      - name: Build buildroot_with_dl_cache_build image
        run: docker build . --tag buildroot_with_dl_cache_build --file docker/buildroot_with_dl_cache_build.Dockerfile --cache-from buildroot_with_dl_cache_build

      - name: Build buildroot_with_dl_cache image
        run: docker build . --tag buildroot_with_dl_cache --file docker/buildroot_with_dl_cache.Dockerfile --cache-from buildroot_with_dl_cache

      - name: Push to GitHub Packages
        shell: bash
        run: |
          docker tag buildroot docker.pkg.github.com/egraff/xplat-ci-images/buildroot:$GITHUB_SHA
          docker tag buildroot docker.pkg.github.com/egraff/xplat-ci-images/buildroot:latest
          docker tag buildroot_with_dl_cache_build docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache_build:$GITHUB_SHA
          docker tag buildroot_with_dl_cache_build docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache_build:latest
          docker tag buildroot_with_dl_cache docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:$GITHUB_SHA
          docker tag buildroot_with_dl_cache docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:latest
          docker push docker.pkg.github.com/egraff/xplat-ci-images/buildroot:$GITHUB_SHA
          docker push docker.pkg.github.com/egraff/xplat-ci-images/buildroot:latest
          docker push docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache_build:$GITHUB_SHA
          docker push docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache_build:latest
          docker push docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:$GITHUB_SHA
          docker push docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:latest

  ppc64_pseries_toolchain:
    name: Buildroot toolchain
    needs: buildroot_base
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to GitHub Package Registry
        shell: bash
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull images from GitHub Package Registry
        shell: bash
        run: |
          docker pull docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:latest
          docker tag docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:latest buildroot
          docker pull docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain_build:latest || true
          docker pull docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain:latest || true

      - name: Build toolchain_build image
        shell: bash
        run: |
          rm -rf .br2-tree
          mkdir -p .br2-tree/configs
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' br2/trees/default/ .br2-tree/
          cp resources/linux_configs/powerpc64_pseries_defconfig .br2-tree/linux-4.19.config
          (cd br2/configs/toolchains && cat include/common_header ppc64_pseries) > .br2-tree/configs/config_defconfig
          docker build . --tag buildroot_toolchain_build --file docker/buildroot_toolchain_build.Dockerfile --cache-from docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain_build:latest

      - name: Build toolchain image
        run: docker build . --tag buildroot_toolchain --file docker/buildroot_toolchain.Dockerfile --cache-from docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain:latest

      - name: Push to GitHub Packages
        shell: bash
        run: |
          docker tag buildroot_toolchain_build docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain_build:$GITHUB_SHA
          docker tag buildroot_toolchain_build docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain_build:latest
          docker tag buildroot_toolchain docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain:$GITHUB_SHA
          docker tag buildroot_toolchain docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain:latest
          docker push docker.pkg.github.com/egraff/xplat-ci-images/buildroot:$GITHUB_SHA
          docker push docker.pkg.github.com/egraff/xplat-ci-images/buildroot:latest
          docker push docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain_build:$GITHUB_SHA
          docker push docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain_build:latest
          docker push docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain:$GITHUB_SHA
          docker push docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain:latest

      - name: Create tar archive containing toolchain
        shell: bash
        run: |
          rm -rf .dockersrv
          mkdir -p .dockersrv/output
          docker run --rm -v ${PWD}/.dockersrv:/srv -w/srv/output buildroot_toolchain tar -cvzf toolchain_ppc64_pseries.tar.gz -C /root/br2-tree/toolchain .

      - name: Upload toolchain tar archive as artifact
        uses: actions/upload-artifact@v2
        with:
          name: toolchain_ppc64_pseries
          path: .dockersrv/output/toolchain_ppc64_pseries.tar.gz

  ppc64_pseries_qemu_images:
    name: Buildroot images
    needs: ppc64_pseries_toolchain
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to GitHub Package Registry
        shell: bash
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Pull images from GitHub Package Registry
        run: |
          docker pull docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:latest
          docker tag docker.pkg.github.com/egraff/xplat-ci-images/buildroot_with_dl_cache:latest buildroot
          docker pull docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain:$GITHUB_SHA
          docker tag docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_toolchain:$GITHUB_SHA buildroot_toolchain
          docker pull docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_images_build:latest || true

      - name: Download toolchain tar archive
        uses: actions/download-artifact@v2
        with:
          name: toolchain_ppc64_pseries

      - name: Extract toolchain tar
        shell: bash
        run: |
          rm -rf .dockersrv
          mkdir -p .dockersrv/toolchain
          tar -xvzf toolchain_ppc64_pseries.tar.gz -C .dockersrv/toolchain

      - name: Build images_build image
        shell: bash
        run: |
          rm -rf .br2-tree
          mkdir -p .br2-tree/configs
          mkdir -p .br2-tree/build_customizations
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' br2/trees/default/ .br2-tree/
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' br2/build_customizations/default/ .br2-tree/build_customizations/
          (cd br2/configs/images && cat include/common_header ppc64_pseries) > .br2-tree/configs/config_defconfig
          docker build . --tag images_build --file docker/images_build.Dockerfile --cache-from docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_images_build:latest

      - name: Push to GitHub Packages
        run: |
          docker tag images_build docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_images_build:$GITHUB_SHA
          docker tag images_build docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_images_build:latest
          docker push docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_images_build:$GITHUB_SHA
          docker push docker.pkg.github.com/egraff/xplat-ci-images/ppc64_pseries_images_build:latest

      - name: Build images_with_sshserver_build image
        shell: bash
        run: |
          rm -rf .br2-tree
          mkdir -p .br2-tree/build_customizations
          rsync --archive --ignore-times --exclude '*~' --exclude '.git*' br2/build_customizations/sshserver/ .br2-tree/build_customizations/
          docker build . --tag images_with_sshserver_build --file docker/images_with_customizations_build.Dockerfile

      - name: Copy images to output folder
        shell: bash
        run: |
          rm -rf .dockersrv
          mkdir -p .dockersrv/output
          docker run --rm -v ${PWD}/.dockersrv:/srv images_with_sshserver_build bash -c "cp -R /root/buildroot/output/images/ /srv/output/images/"

      - name: Upload images as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: images
          path: |
            .dockersrv/output/images/vmlinux
            .dockersrv/output/images/rootfs.cpio
